컴퓨터 내부에서 수를 표현하는 방법
0,1 - 2진수

1byte - 8bit(0,1 로 표현되는 자리수가 8개)
2byte - 16bit(0,1 로 표현되는 자리수가 16개)
4byte - 32bit(0,1 로 표현되는 자리수가 32개)
8byte - 64bit(0,1 로 표현되는 자리수가 64개)

32(10진수) -> 2진수(100000)  -->32/2


변수 - 변하는 수
     - 공간을 가지고 있는 변하는 수
     - 이런 공간의 이름을 변수라고 함

변수
js에서 -> var, const, let
java에서 -> 자료형(숫자, 문자, 논리값...) 변수명 -> 변수를 선언한다 (typescript도 자료형 명시함. 기본형이 long과 double임)

int num; -> 정수형 변수명 num
char ch; -> 문자형 변수명 ch

변수를 선언하면 변수를 담을 공간(메모리가 할당이 된다.)
자료형에 따라서 다른 공간 메모리를 할당 받습니다.
int - 4byte - 32bit


정수형
byte - 1byte - 8bit
short - 2byte - 16bit
int - 4byte - 32bit(2진수 32칸)
long - 8byte - 64bit(2진수 64칸)

- 기본적으로 int 기준 (byte num = 1; -> 내부적으로 int num = 1 로 처리후 -> byte로 변환)


실수형(소수점이 있는 자료형)
float - 4byte
double - 8byte
-기본적으로 double 기준 (float num = 1; -> 내부적으로 double num = 1 로 처리후 -> float으로 변환)

문자
char - 2byte

int num; //선언
num = 10; //10값을 num에 대입(복사) - 대입

int num = 10; //초기화 - 처음 변수에 값을 대입

package - 소스 코드의 묶음 -> 폴더

변수 초기화
변수 선언 후에 처음 값을 대입
int num;
num = 10;
int num = 10;

int year = 2018;

변수의 이름 정하기
1) 변수명은 영문자(대소문자), 숫자를 사용한다.
2) 숫자로는 시작X
3) 자바에서 이미 사용중인 예약어는 사용X(while, int, break, continue, switch ....)

카멜케이스 noOfStudent -> 변수, 메서드명

파스칼케이스 NoOfStudent -> 클래스명

int num#1
int num$10
int _num

변수와 메모리
int num; -> num 공간(4byte - 32bit)

49페이지 하단
int -- -2^31~-2^31 -1

++++++++++++++++++++++++++++++++++

자료형의 공간 크기
byte - 1byte - 8bit(정수) (-128~127)
boolean - 1byte - 8bit
short - 2byte - 16bit(-2^15 ~2^15 -1)
char - 2byte - 16bit(문자 -> 숫자 -> 양수만 표현)
int - 4byte - 32bit(정수) - 시스템에서 기본 인식 자료형
               (-2^31~-2^31 -1)
float - 4byte - 32bit(실수)
long - 8byte - 64bit(정수)
double - 8byte - 64bit(실수) - 시스템에서 기본 인식 자료형

정수형
1. byte - 1바이트
2. short - 2바이트
3. int - 4바이트
     - 가장 많이 사용 되는 자료형
     - 모든 정수형자료는 int로 인식 -> 변환
     - int로 지정하면 변환X -> 효율적이다

4. long - 8바이트
     - 정수를 표현하는 가장 큰 자료형
     - 모든 정수 값을 기본으로 int형으로 처리 -> 이를 넘어서는 숫자범위 -> 오류발생
     - 처음부터 long 으로 처리하라고 명시(L, l)

     long num = 12345678900; - X
  -> long num = 12345678900L; - O
     long num = 10;

     문자형
     char - 2바이트
          - 문자 -> 내부적으로 정수로 처리(양수로만 구성된)
          작은따옴표(문자1개)
          예) 문자여러개 -> char X -> 문자열(큰따옴표)
          예) 형변환(현재 자료형을 다른 자료형으로 변환)
          int -> char
          int ch = 65;
          char ch2 = (char)ch;

          char ch1 = 'A';

          String text = "ABCD";
                         (ABCD￦0)
          String text2 = "A"; -> A￦0 - ￦0 - NULL -> 문자열이 끝났음을 표시

          UTF-16 - EUC-KR(한글 2바이트)
          UTF-8 - 한글 3바이트(웹에서는 대부분 UTF-8)

     실수형(소수점 - 부동소수점)
     float - 4byte, 32bit

     double - 8byte, 64bit - 시스템에서 기본으로 double로 먼저 처리

     Float 기본으로 인식 안한다 -> (F,f 문자를 끝에 추가)

     long num = 1000000;
               (int) -> 작은 -> 큰자료형 -> 자동변환

     float num = 3.14F;
               double

     부동 소수점 방식의 오류(실수) BigDecimal
     -> 2진수로 소수를 표현하는 방식(한계) -> 정확도 문제
     -> 정확도의 보장 범위
     -> double -> 8byte -> 64bit -> 정확도의 범위가 float 보다는 크다


     논리형
     Boolean - 1byte, true, false

     자료형 없이 변수 선언하기
     1. 지역변수로만 사용
     2. 자료형이 다른 값은 입력X
     
     var로 지정하면 -> 컴파일시에 자동으로 변환

     String -> String 객체

     상수
      - 변하지 않는 수
      final 키워드가 추가 되면 상수

      상수명 -> 관례 -> 대문자로 기입, 띄어쓰기는 _를 추가해서 정한다


     
     참고)
     변수 final -> 상수
     메서드 final -> 재정의 불가
     클래스명 final -> 상속불가

     상수는 변하지 않는 값

     상수를 선언하고, 처음 값을 대입하는 것은 가능

     
     리터럴
      - 모든 숫자, 문자, 논리값(true, false) - 기본 자료형

      int num = 3;

      String text = "ABCD"

      기본자료형 마다 사수풀

      long num = 1234567489012; int 상수풀에서 해당 숫자를 찾는다 -> 숫자X -> 오류

      long 상수풀에서 숫자를 찾아야 한다
      -> L, l
      long num = 123456789012L;


     형변환
      변수의 자료형이 다르면 동일하게 맞춰주는 것
      1. 묵시적 형변환(자동 형변환)
          1) 작은자료형 -> 큰자료형으로 변환
          ex) byte num = 10;
          int num2 = num;(int형이 byte 형보다 크므로 num가 자동으로 int로 변환 - 자료손실이 발생하지 않으므로)

          2) 덜 정밀한 자료형 -> 더 정밀한 자료형
          정수보다 실수가 더 정밀(정수를 실수에 대입 -> 자동 형변환)

          3) 연산중 자동 형변환
          정수 / 실수
          int/float -> 결과가 float 형태로 변환


      2. 명시적 형변환(강제 형변환)
          큰 자료형 -> 작은 가료형으로 변환(손실 발생 가능성 있음.)

          더 정밀한 자료형 -> 덜 정밀한 자료형(손실 발생 가능성 있음.)
          실수 --> 정수

          ex)

          int num1 = 200;
		byte num2 = (byte)num1; // int -> byte
		System.out.prinln(num2);
		
		double num1 = 3.14; //8
		long num2 = (long)num1; // 손실발생
		System.out.println(num2);

          char -> 2byte
          정수형
          (int)ch1
          int ch2 = 67;
          (char)ch2 


          자료형
               1) 기본 자료형(int,char,boolean... 숫자, 문자, 논리값..)
               2) 참조 자료형(인스턴스 자료형)
               Person person = new Person();

               String text1 = "ABCD";